// generated by jsonenums -type TermType; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_TermTypeNameToValue = map[string]TermType{
		"EOF":         EOF,
		"Nonterminal": Nonterminal,
		"Terminal":    Terminal,
		"Any":         Any,
	}

	_TermTypeValueToName = map[TermType]string{
		EOF:         "EOF",
		Nonterminal: "Nonterminal",
		Terminal:    "Terminal",
		Any:         "Any",
	}
)

func init() {
	var v TermType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TermTypeNameToValue = map[string]TermType{
			interface{}(EOF).(fmt.Stringer).String():         EOF,
			interface{}(Nonterminal).(fmt.Stringer).String(): Nonterminal,
			interface{}(Terminal).(fmt.Stringer).String():    Terminal,
			interface{}(Any).(fmt.Stringer).String():         Any,
		}
	}
}

// MarshalJSON is generated so TermType satisfies json.Marshaler.
func (r TermType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TermTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid TermType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so TermType satisfies json.Unmarshaler.
func (r *TermType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TermType should be a string, got %s", data)
	}
	v, ok := _TermTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid TermType %q", s)
	}
	*r = v
	return nil
}
